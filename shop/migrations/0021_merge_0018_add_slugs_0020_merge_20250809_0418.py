# # Generated by Django 5.1.1 on 2025-08-10 08:27

# from django.db import migrations, models


# class Migration(migrations.Migration):

#     dependencies = [
#         ('shop', '0018_add_slugs'),
#         ('shop', '0020_merge_20250809_0418'),
#     ]

#     operations = [
#         # Step 1: add nullable, non-unique
#         migrations.AddField(
#             model_name='category',
#             name='slug',
#             field=models.SlugField(blank=True, null=True, db_index=True, max_length=160),
#         ),
#         migrations.AddField(
#             model_name='product',
#             name='slug',
#             field=models.SlugField(blank=True, null=True, db_index=True, max_length=220),
#         ),

#         # Step 2: populate
#         migrations.RunPython(populate_category_slugs, migrations.RunPython.noop),
#         migrations.RunPython(populate_product_slugs, migrations.RunPython.noop),

#         # Step 3: enforce unique + non-null
#         migrations.AlterField(
#             model_name='category',
#             name='slug',
#             field=models.SlugField(blank=True, null=False, db_index=True, max_length=160, unique=True),
#         ),
#         migrations.AlterField(
#             model_name='product',
#             name='slug',
#             field=models.SlugField(blank=True, null=False, db_index=True, max_length=220, unique=True),
#         ),
#     ]
#####################################################
from django.db import migrations, models
from django.utils.text import slugify

def populate_category_slugs(apps, schema_editor):
    Category = apps.get_model('shop', 'Category')
    for category in Category.objects.all():
        if not getattr(category, 'slug', None):
            base = slugify(category.name, allow_unicode=True) or 'category'
            candidate = base
            i = 1
            while Category.objects.filter(slug=candidate).exclude(pk=category.pk).exists():
                i += 1
                candidate = f'{base}-{i}'
            category.slug = candidate
            category.save(update_fields=['slug'])

def populate_product_slugs(apps, schema_editor):
    Product = apps.get_model('shop', 'Product')
    for product in Product.objects.all():
        if not getattr(product, 'slug', None):
            base = slugify(product.name, allow_unicode=True) or 'product'
            candidate = base
            i = 1
            while Product.objects.filter(slug=candidate).exclude(pk=product.pk).exists():
                i += 1
                candidate = f'{base}-{i}'
            product.slug = candidate
            product.save(update_fields=['slug'])

class Migration(migrations.Migration):
    dependencies = [
        ('shop', '0017_alter_order_delivery_method_post_only'),
    ]
    operations = [
        # 1) add as nullable/non-unique
        migrations.AddField(
            model_name='category',
            name='slug',
            field=models.SlugField(max_length=160, blank=True, null=True, db_index=True),
        ),
        migrations.AddField(
            model_name='product',
            name='slug',
            field=models.SlugField(max_length=220, blank=True, null=True, db_index=True),
        ),
        # 2) backfill
        migrations.RunPython(populate_category_slugs, migrations.RunPython.noop),
        migrations.RunPython(populate_product_slugs, migrations.RunPython.noop),
        # 3) enforce constraints
        migrations.AlterField(
            model_name='category',
            name='slug',
            field=models.SlugField(max_length=160, blank=True, null=False, unique=True, db_index=True),
        ),
        migrations.AlterField(
            model_name='product',
            name='slug',
            field=models.SlugField(max_length=220, blank=True, null=False, unique=True, db_index=True),
        ),
    ]